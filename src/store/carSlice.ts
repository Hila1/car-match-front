import { createSlice, PayloadAction, createAsyncThunk } from '@reduxjs/toolkit';nimport { carApi, Car, CarCreate, CarUpdate } from '../services/api';nninterface UserInput {n  passengers: string;n  trunkSize: string;n  budget: string;n  drivingStyle: string;n  safetyLevel: string;n}nninterface CarState {n  userInput: UserInput | null;n  cars: Car[];n  loading: boolean;n  error: string | null;n}nnconst initialState: CarState = {n  userInput: null,n  cars: [],n  loading: false,n  error: null,n};nn// Async thunks for API callsnexport const fetchCars = createAsyncThunk(n  'car/fetchCars',n  async () => {n    return await carApi.getCars();n  }n);nnexport const createCar = createAsyncThunk(n  'car/createCar',n  async (car: CarCreate) => {n    return await carApi.createCar(car);n  }n);nnexport const updateCar = createAsyncThunk(n  'car/updateCar',n  async ({ id, car }: { id: number; car: CarUpdate }) => {n    return await carApi.updateCar(id, car);n  }n);nnexport const deleteCar = createAsyncThunk(n  'car/deleteCar',n  async (id: number) => {n    await carApi.deleteCar(id);n    return id;n  }n);nnconst carSlice = createSlice({n  name: 'car',n  initialState,n  reducers: {n    setUserInput(state, action: PayloadAction<UserInput>) {n      state.userInput = action.payload;n    },n    clearError(state) {n      state.error = null;n    },n  },n  extraReducers: (builder) => {n    // Fetch carsn    buildern      .addCase(fetchCars.pending, (state) => {n        state.loading = true;n        state.error = null;n      })n      .addCase(fetchCars.fulfilled, (state, action) => {n        state.loading = false;n        state.cars = action.payload;n      })n      .addCase(fetchCars.rejected, (state, action) => {n        state.loading = false;n        state.error = action.error.message || 'Failed to fetch cars';n      });nn    // Create carn    buildern      .addCase(createCar.pending, (state) => {n        state.loading = true;n        state.error = null;n      })n      .addCase(createCar.fulfilled, (state, action) => {n        state.loading = false;n        state.cars.push(action.payload);n      })n      .addCase(createCar.rejected, (state, action) => {n        state.loading = false;n        state.error = action.error.message || 'Failed to create car';n      });nn    // Update carn    buildern      .addCase(updateCar.pending, (state) => {n        state.loading = true;n        state.error = null;n      })n      .addCase(updateCar.fulfilled, (state, action) => {n        state.loading = false;n        const index = state.cars.findIndex(car => car.id === action.payload.id);n        if (index !== -1) {n          state.cars[index] = action.payload;n        }n      })n      .addCase(updateCar.rejected, (state, action) => {n        state.loading = false;n        state.error = action.error.message || 'Failed to update car';n      });nn    // Delete carn    buildern      .addCase(deleteCar.pending, (state) => {n        state.loading = true;n        state.error = null;n      })n      .addCase(deleteCar.fulfilled, (state, action) => {n        state.loading = false;n        state.cars = state.cars.filter(car => car.id !== action.payload);n      })n      .addCase(deleteCar.rejected, (state, action) => {n        state.loading = false;n        state.error = action.error.message || 'Failed to delete car';n      });n  },n});nnexport const { setUserInput, clearError } = carSlice.actions;nexport default carSlice.reducer;