const API_BASE_URL = 'http://localhost:8000';nnexport interface Car {n  id: number;n  make: string;n  model: string;n  year: number;n  color?: string;n}nnexport interface CarCreate {n  make: string;n  model: string;n  year: number;n  color?: string;n}nnexport interface CarUpdate {n  make?: string;n  model?: string;n  year?: number;n  color?: string;n}nnexport const carApi = {n  // Get all carsn  async getCars(): Promise<Car[]> {n    const response = await fetch(`${API_BASE_URL}/cars/`);n    if (!response.ok) {n      throw new Error('Failed to fetch cars');n    }n    return response.json();n  },nn  // Get a single car by IDn  async getCar(id: number): Promise<Car> {n    const response = await fetch(`${API_BASE_URL}/cars/${id}`);n    if (!response.ok) {n      throw new Error('Failed to fetch car');n    }n    return response.json();n  },nn  // Create a new carn  async createCar(car: CarCreate): Promise<Car> {n    const response = await fetch(`${API_BASE_URL}/cars/`, {n      method: 'POST',n      headers: {n        'Content-Type': 'application/json',n      },n      body: JSON.stringify(car),n    });n    if (!response.ok) {n      throw new Error('Failed to create car');n    }n    return response.json();n  },nn  // Update a carn  async updateCar(id: number, car: CarUpdate): Promise<Car> {n    const response = await fetch(`${API_BASE_URL}/cars/${id}`, {n      method: 'PUT',n      headers: {n        'Content-Type': 'application/json',n      },n      body: JSON.stringify(car),n    });n    if (!response.ok) {n      throw new Error('Failed to update car');n    }n    return response.json();n  },nn  // Delete a carn  async deleteCar(id: number): Promise<void> {n    const response = await fetch(`${API_BASE_URL}/cars/${id}`, {n      method: 'DELETE',n    });n    if (!response.ok) {n      throw new Error('Failed to delete car');n    }n  },n};nnexport const searchHistoryApi = {n  // Get search historyn  async getSearchHistory(): Promise<string[]> {n    const response = await fetch(`${API_BASE_URL}/search-history/`);n    if (!response.ok) {n      throw new Error('Failed to fetch search history');n    }n    return response.json();n  },nn  // Add search query to historyn  async addSearchQuery(query: string): Promise<string[]> {n    const response = await fetch(`${API_BASE_URL}/search-history/`, {n      method: 'POST',n      headers: {n        'Content-Type': 'application/json',n      },n      body: JSON.stringify(query),n    });n    if (!response.ok) {n      throw new Error('Failed to add search query');n    }n    return response.json();n  },n};